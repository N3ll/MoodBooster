{
  "name": "mingo",
  "version": "0.4.0",
  "description": "JavaScript implementation of MongoDB query language",
  "main": "mingo.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tape test/*.js",
    "build": "uglifyjs mingo.js -c -m -o mingo.min.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kofrasa/mingo.git"
  },
  "files": [
    "mingo.js",
    "mingo.min.js",
    "README.md",
    "LICENSE"
  ],
  "dependencies": {
    "underscore": ">=1.5.2"
  },
  "devDependencies": {
    "underscore": ">=1.5.2",
    "backbone": ">=1.1.2",
    "tape": ">=2.14.0",
    "JSON": ">=1.0.0",
    "uglify-js": "2.4.x"
  },
  "keywords": [
    "util",
    "mongo",
    "mongodb",
    "nosql",
    "query",
    "browser",
    "functional",
    "aggregation",
    "filtering",
    "grouping",
    "searching"
  ],
  "author": {
    "name": "Francis Asante",
    "email": "kofrasa@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kofrasa/mingo/issues"
  },
  "gitHead": "d7b1740b3abaa677da8c633bf5326496aec8c9d5",
  "readme": "# Mingo\r\nJavaScript implementation of MongoDB query language\r\n\r\nMingo harnesses the power of MongoDB-style queries and allows direct querying of in-memory \r\njavascript objects in both client and server-side environments.\r\n\r\n[![build status](https://secure.travis-ci.org/kofrasa/mingo.png)](http://travis-ci.org/kofrasa/mingo)\r\n\r\n## Dependencies\r\n[underscore](https://github.com/jashkenas/underscore)\r\n\r\n## Installing\r\n```$ npm install mingo```\r\n\r\nIn browser\r\n```html\r\n<!-- DO NOT FORGET Underscore -->\r\n<script type=\"text/javascript\" src=\"./underscore-min.js\"></script>\r\n<script type=\"text/javascript\" src=\"./mingo.min.js\"></script>\r\n```\r\n\r\n## Features\r\n- Supports Dot Notation for both '_&lt;array&gt;.&lt;index&gt;_' and '_&lt;document&gt;.&lt;field&gt;_' selectors\r\n- Comparisons Operators ($gt, $gte, $lt, $lte, $ne, $nin, $in)\r\n- Logical Operators ($and, $or, $nor, $not)\r\n- Evaluation Operators ($regex, $mod, $where)\r\n- Array Operators ($all, $elemMatch, $size)\r\n- Element Operators ($exists, $type)\r\n- Aggregation Pipeline Operators ($group, $match, $project, $sort, $limit, $unwind, $skip)\r\n- Conditional Operators ($cond, $ifNull)\r\n- Group Operators ($addToSet, $sum, $max, $min, $avg, $push, $first, $last)\r\n- Arithmetic Operators ($add, $divide, $mod, $multiply, $subtract)\r\n- String Operators ($cmp, $strcasecmp, $concat, $substr, $toLower, $toUpper)\r\n- Set Operators ($setEquals, $setIntersection, $setDifference, $setUnion, $setIsSubset, $anyElementTrue, $allElementsTrue)\r\n- Projection Operators ($elemMatch, $slice)\r\n- JSON stream filtering and projection. *_NodeJS only_*\r\n\r\n## Usage\r\n```javascript\r\n\r\nvar Mingo = require('mingo');\r\n// or just access *Mingo* global in browser\r\n\r\n// setup the key field for your collection\r\nMingo.setup({\r\n    key: '_id' // default\r\n});\r\n\r\n// create a query with criteria\r\n// find all grades for homework with score >= 50\r\nvar query = new Mingo.Query({\r\n    type: \"homework\",\r\n    score: { $gte: 50 }\r\n});\r\n```\r\n\r\n## Searching and Filtering\r\n```javascript\r\n// filter collection with find()\r\nvar cursor = query.find(collection);\r\n\r\n// shorthand with query criteria\r\n// cursor = Mingo.find(collection, criteria);\r\n\r\n// sort, skip and limit by chaining\r\ncursor.sort({student_id: 1, score: -1})\r\n    .skip(100)\r\n    .limit(100);\r\n\r\n// count matches\r\ncursor.count();\r\n\r\n// iterate cursor\r\n// iteration is forward only\r\nwhile (cursor.hasNext()) {\r\n    console.log(cursor.next());\r\n}\r\n\r\n// use first(), last() and all() to retrieve matched objects\r\ncursor.first();\r\ncursor.last();\r\ncursor.all();\r\n\r\n// Filter non-matched objects (\r\nvar result = query.remove(collection);\r\n```\r\n\r\n## Aggregation Pipeline\r\n```javascript\r\nvar agg = new Mingo.Aggregator([\r\n    {'$match': { \"type\": \"homework\"}},\r\n    {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\r\n    {'$sort':{'_id': 1, 'score': 1}}\r\n]);\r\n\r\nvar result = agg.run(collection);\r\n\r\n// shorthand\r\nresult = Mingo.aggregate(\r\n    collection,\r\n    [\r\n        {'$match': { \"type\": \"homework\"}},\r\n        {'$group':{'_id':'$student_id', 'score':{$min:'$score'}}},\r\n        {'$sort':{'_id': 1, 'score': 1}}\r\n    ]\r\n);\r\n```\r\n\r\n## Stream Filtering\r\n```js\r\nvar JSONStream = require('JSONStream'),\r\n    fs = require('fs'),\r\n    Mingo = require('mingo');\r\n\r\nvar query = new Mingo.Query({\r\n  scores: { $elemMatch: {type: \"exam\", score: {$gt: 90}} }\r\n}, {name: 1});\r\n\r\n// ex. [\r\n//      { \"_id\" : 11, \"name\" : \"Marcus Blohm\", \"scores\" : [\r\n//          { \"type\" : \"exam\", \"score\" : 78.42617835651868 },\r\n//          { \"type\" : \"quiz\", \"score\" : 82.58372817930675 },\r\n//          { \"type\" : \"homework\", \"score\" : 87.49924733328717 },\r\n//          { \"type\" : \"homework\", \"score\" : 15.81264595052612 } ]\r\n//      },\r\n//      ...\r\n//     ]\r\nfile = fs.createReadStream('./students.json');\r\n\r\nvar qs = query.stream();\r\nqs.on('data', function (data) {\r\n    console.log(data); // log filtered outputs\r\n    // ex. { name: 'Dinah Sauve', _id: 49 }\r\n});\r\n\r\nfile.pipe(JSONStream.parse(\"*\")).pipe(qs);\r\n\r\n```\r\n\r\n## Backbone Integration\r\n```javascript\r\n// using with Backbone\r\nvar Grades = Backbone.Collection.extend(Mingo.CollectionMixin);\r\n\r\nvar grades = new Grades(collection);\r\n\r\n// find students with grades less than 50 in homework or quiz\r\n// sort by score ascending and type descending\r\ncursor = grades.query({\r\n    $or: [{type: \"quiz\", score: {$lt: 50}}, {type: \"homework\", score: {$lt: 50}}]\r\n}).sort({score: 1, type: -1}).limit(10);\r\n\r\n// print grade with the lowest score\r\ncursor.first();\r\n```\r\n\r\nFor documentation on using query operators see [mongodb](http://docs.mongodb.org/manual/reference/operator/query/)\r\n\r\n## API\r\n### Mingo.Query(criteria, [projection])\r\nCreates a ```Mingo.Query``` object with the given query criteria\r\n- ```test(obj)``` Returns true if the object passes the query criteria, otherwise false.\r\n- ```find(collection, [projection])``` Performs a query on a collection and returns a ```Mingo.Cursor``` object.\r\n- ```remove(collection)``` Remove matching documents from the collection and return the remainder\r\n- ```stream()``` Return a ```Mingo.Stream``` to filter and transform JSON objects from a readable stream. *_NodeJS only_*\r\n\r\n### Mingo.Aggregator(expressions)\r\nCreates a ```Mingo.Aggregator``` object with a collection of aggregation pipeline expressions\r\n- ```run()``` Apply the pipeline operations over the collection by order of the sequence added\r\n\r\n### Mingo.Cursor(collection, query, [projection])\r\nCreates a ```Mingo.Cursor``` object which holds the result of applying the query over the collection\r\n- ```all()``` Returns all the matched documents in a cursor as a collection.\r\n- ```first()``` Returns the first documents in a cursor.\r\n- ```last()``` Returns the last document in a cursor\r\n- ```count()``` Returns a count of the documents in a cursor.\r\n- ```limit(n)``` Constrains the size of a cursor's result set.\r\n- ```skip(n)``` Returns a cursor that begins returning results only after passing or skipping a number of documents.\r\n- ```sort(modifier)``` Returns results ordered according to a sort specification.\r\n- ```next()``` Returns the next document in a cursor.\r\n- ```hasNext()``` Returns true if the cursor has documents and can be iterated.\r\n- ```max(expression)``` Specifies an exclusive upper index bound for a cursor\r\n- ```min(expression)``` Specifies an inclusive lower index bound for a cursor.\r\n- ```map(callback)``` Applies a function to each document in a cursor and collects the return values in an array.\r\n- ```forEach(callback)``` Applies a JavaScript function for every document in a cursor.\r\n\r\n### Mingo.Stream(query, [options]) - _NodeJS only_\r\nA Transform stream that can be piped from/to any readable/writable JSON stream.\r\n\r\n### Mingo.CollectionMixin\r\nA mixin object for ```Backbone.Collection``` which adds ```query()``` and ```aggregate()``` methods\r\n- ```query(criteria)``` Performs a query on the collection and returns a ```Mingo.Cursor``` object.\r\n- ```aggregate(expressions)``` Performs aggregation operation using the aggregation pipeline.\r\n\r\n### Mingo.find(collection, criteria, [projection])\r\nPerforms a query on a collection and returns a ```Mingo.Cursor``` object.\r\n\r\n### Mingo.remove(collection, criteria)\r\nReturns the non-matched objects as a collection from executing a ```Mingo.Query``` with the given criteria\r\n\r\n### Mingo.aggregate(collection, expressions)\r\nPerforms aggregation operation using the aggregation pipeline.\r\n\r\n## TODO\r\n - Geospatial Query Operators ($geoWithin, $geoIntersects, $near, $nearSphere)\r\n - Geometry Specifiers ($geometry, $maxDistance, $center, $centerSphere, $box, $polygon)\r\n\r\n## License\r\nMIT",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/kofrasa/mingo#readme",
  "_id": "mingo@0.4.0",
  "_shasum": "05cdfa5a6fee827c3d2ec1452668e8369f42ead3",
  "_from": "vdininski/mingo",
  "_resolved": "git://github.com/vdininski/mingo.git#d7b1740b3abaa677da8c633bf5326496aec8c9d5"
}
